// ADD THIS FILE TO GIT IGNORE FOR LAUNCH!!

GET MEMORY USAGE BY PODS. WORKS
  sum(container_memory_working_set_bytes{namespace="default"}) by by (pod)
  QUERY EQUIVALENT
const query = `${promURL}query_range?query=sum(container_memory_working_set_bytes${namespaceStr}) 
by (pod)&start=${startDateTime}&end=${endDateTime}&step=${"1m"}`

http://127.0.0.1:9090/api/v1/query_range?query=sum(container_memory_working_set_bytes{namespace="default"}) 
by (pod)&start=1662500157637&end=1662503958134&step=6h

// PROMQL Response returns a data object below with result array
// Result array holds individual pod's metrics
// Values is an array of arrays that holds the time in milliseconds of the requests (first element) and the value of the query (second element)


{
  "status": "success",
  "data": {
      "resultType": "matrix",
      "result": [
          {
              "metric": {
                  "pod": "nodejs-guestbook-backend-c9b7887f9-npzrr"
              },
              "values": [
                  [
                      1662461863.033,
                      "73625600"
                  ],
                  [
                      1662483463.033,
                      "73273344"
                  ],
                  [
                      1662505063.033,
                      "73986048"
                  ]
              ]
          }
      ]
}

multiply the number on top 1662345234512341234.033 by 1000 (miliseconds) to get the actual date

-------------------- CPU METRICS --------------------

CPU Utilization by Node. should list 2 nodes (based on deployment replicas)
100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[1m]) * 100) * on(instance) group_left(nodename) (node_uname_info))

per pod average number of CPUS used during last 1m
sum(
  rate(container_cpu_usage_seconds_total{container!~"POD|"}[1m])
) by (pod)

the [1m] in the queries can be adjusted to show in the PAST x time
if you want to display past 5 hours, replace with 5h

allocatable is 940 mCPU = 940 mili cpu

-------------------- CPU USAGE BY POD --------------------

sum(
  rate(container_cpu_usage_seconds_total{container!~"POD|"}[5m])*100
) by (node)

gives us usage by milicores
0.07031443141175173
0.06659781737942783

-------------------- ANALYSIS PAGE --------------------

add variable to node=${} and check which node the analyzed pod belongs to

CONTAINER NETWORK BYTES RECEIVED AVG 5m
rate(container_network_receive_bytes_total{service!~"daddy-kube-prometheus-stac-kubelet",node="gke-guestbook-my-first-c-default-pool-feaf7786-h6kd"}[5m])

CONTAINER NETWORK BYTES TRANSMIT AVG 5m
rate(container_network_transmit_bytes_total{service!~"daddy-kube-prometheus-stac-kubelet",node="gke-guestbook-my-first-c-default-pool-feaf7786-h6kd"}[5m])

